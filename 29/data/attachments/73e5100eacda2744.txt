# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Login Validation >> Login with valid data / TC 1
- Location: /home/user/Documents/QA_Automation_projects/Playwright/Pl project Buggy Rating/tests/test/mainLoginPage.spec.ts:18:9

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: locator('xpath=(//a[@class="nav-link"])[2]')
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for locator('xpath=(//a[@class="nav-link"])[2]')

    at /home/user/Documents/QA_Automation_projects/Playwright/Pl project Buggy Rating/tests/test/mainLoginPage.spec.ts:23:57
```

# Page snapshot

```yaml
- banner:
  - navigation:
    - link "Buggy Rating"
    - textbox "Login"
    - textbox
    - button "Login"
    - link "Register"
  - heading "Buggy Cars Rating" [level=1]
  - img
- main:
  - main:
    - heading "Popular Make" [level=2]
    - link "Lamborghini":
      - img "Lamborghini"
    - heading "Lamborghini (11082 votes)" [level=3]
    - heading "Popular Model" [level=2]
    - link "Diablo":
      - img "Diablo"
    - heading "Lamborghini Diablo (3853 votes)" [level=3]
    - heading "Overall Rating" [level=2]
    - link:
      - img
    - heading "List of all registered models." [level=3]
  - separator
  - link "Facebook":
    - img
  - link "Twitter":
    - img
  - paragraph: © 2016 Buggy Software, Inc.
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { MainPage } from '../page/MainPage.ts';
   3 | import { 
   4 |     generateAndStoreValidLogin, 
   5 |     generateAndStoreValidPassword, 
   6 |     getStoredLogin, 
   7 |     getStoredPassword 
   8 | } from '../../utils/dataGenerators';
   9 |
   10 | test.describe('Login Validation', () => {
   11 |     let mainPage: MainPage;
   12 |
   13 |     test.beforeEach(async ({ page }) => {
   14 |         mainPage = new MainPage(page); 
   15 |         await mainPage.goto(); 
   16 |     });
   17 |
   18 |     test('Login with valid data / TC 1', async () => {
   19 |         // Використовуємо збережені логін і пароль
   20 |         await mainPage.fillLoginDetails(getStoredLogin(), getStoredPassword());
   21 |         await mainPage.clickLoginButton();
   22 |
>  23 |         await expect(mainPage.getLogoutButtonLocator()).toBeVisible();
      |                                                         ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
   24 |     });
   25 |
   26 |     test('Login with empty Login field / TC 2', async () => {
   27 |         // Використовуємо функцію для генерації паролю
   28 |         await mainPage.fillLoginDetails('', generateAndStoreValidPassword());
   29 |         await mainPage.clickLoginButton();
   30 |
   31 |         await expect(mainPage.getLoginFieldValidationMessage()).resolves.toMatch(/fill out this field/i);
   32 |     });
   33 |
   34 |     test('Login with empty Password field / TC 3', async () => {
   35 |         // Використовуємо функцію для генерації логіну
   36 |         await mainPage.fillLoginDetails(generateAndStoreValidLogin(), '');
   37 |         await mainPage.clickLoginButton();
   38 |
   39 |         await expect(mainPage.getPasswordFieldValidationMessage()).resolves.toMatch(/fill out this field/i);
   40 |     });
   41 |
   42 |     test('Login with empty fields / TC 4', async () => {
   43 |         // Логін і пароль пусті
   44 |         await mainPage.fillLoginDetails('', '');
   45 |         await mainPage.clickLoginButton();
   46 |
   47 |         await expect(mainPage.getLoginFieldValidationMessage()).resolves.toMatch(/fill out this field/i);
   48 |     });
   49 |
   50 |     test('Login with invalid data / TC 5', async () => {
   51 |         // Генеруємо нові неправильні дані
   52 |         await mainPage.fillLoginDetails(generateAndStoreValidLogin(), generateAndStoreValidPassword());
   53 |         await mainPage.clickLoginButton();
   54 |
   55 |         await expect(mainPage.getWarningLabelText()).resolves.toMatch(/invalid username\/password/i);
   56 |     });
   57 | });
   58 |
   59 |
   60 |
   61 | // import { test, expect } from '@playwright/test';
   62 | // import { MainPage } from '../page/MainPage.ts';
   63 | // import { 
   64 | //     generateValidLogin, 
   65 | //     generateValidPassword 
   66 | // } from '../../utils/dataGenerators';
   67 |
   68 | // test.describe('Login Validation', () => {
   69 | //     let mainPage: MainPage;
   70 |
   71 | //     test.beforeEach(async ({ page }) => {
   72 | //         mainPage = new MainPage(page); 
   73 | //         await mainPage.goto(); 
   74 | //     });
   75 |
   76 | //     test('Login with valid data / TC 1', async () => {
   77 | //         await mainPage.fillLoginDetails('TestLogin_', 'Password1@');
   78 | //         await mainPage.clickLoginButton();
   79 |
   80 | //         await expect(mainPage.getLogoutButtonLocator()).toBeVisible();
   81 | //     });
   82 |
   83 | //     test('Login with empty Login field / TC 2', async () => {
   84 | //         await mainPage.fillLoginDetails('', generateValidPassword());
   85 | //         await mainPage.clickLoginButton();
   86 |
   87 | //         await expect(mainPage.getLoginFieldValidationMessage()).resolves.toMatch(/fill out this field/i);
   88 | //     });
   89 |
   90 | //     test('Login with empty Password field / TC 3', async () => {
   91 | //         await mainPage.fillLoginDetails(generateValidLogin(), '');
   92 | //         await mainPage.clickLoginButton();
   93 |
   94 | //         await expect(mainPage.getPasswordFieldValidationMessage()).resolves.toMatch(/fill out this field/i);
   95 | //     });
   96 |
   97 | //     test('Login with empty fields / TC 4', async () => {
   98 | //         await mainPage.fillLoginDetails('', '');
   99 | //         await mainPage.clickLoginButton();
  100 |
  101 | //         await expect(mainPage.getLoginFieldValidationMessage()).resolves.toMatch(/fill out this field/i);
  102 | //     });
  103 |
  104 | //     test('Login with invalid data / TC 5', async () => {
  105 | //         await mainPage.fillLoginDetails(generateValidLogin(), generateValidPassword());
  106 | //         await mainPage.clickLoginButton();
  107 |
  108 | //         await expect(mainPage.getWarningLabelText()).resolves.toMatch(/invalid username\/password/i);
  109 | //     });
  110 | // });
  111 |
  112 |
  113 |
  114 | // import { test, expect } from '@playwright/test';
  115 | // import { MainPage } from '../page/MainPage.ts';
  116 | // import { faker } from '@faker-js/faker'; 
  117 |
  118 | // test.describe('Login Validation', () => {
  119 | //     let mainPage: MainPage;
  120 |
  121 | //     test.beforeEach(async ({ page }) => {
  122 | //         mainPage = new MainPage(page); 
  123 | //         await mainPage.goto(); 
```