# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Login Validation >> Login with valid data / TC 1
- Location: /home/user/Documents/QA_Automation_projects/Playwright/Pl project Buggy Rating/tests/test/mainLoginPage.spec.ts:13:9

# Error details

```
Error: expect(received).toBeTruthy()

Received: false
    at /home/user/Documents/QA_Automation_projects/Playwright/Pl project Buggy Rating/tests/test/mainLoginPage.spec.ts:18:57
```

# Page snapshot

```yaml
- banner:
  - navigation:
    - link "Buggy Rating"
    - textbox "Login": TestLogin_
    - textbox: Password1@
    - button "Login" [disabled]
    - link "Register"
  - heading "Buggy Cars Rating" [level=1]
  - img
- main:
  - main:
    - img
  - separator
  - link "Facebook":
    - img
  - link "Twitter":
    - img
  - paragraph: © 2016 Buggy Software, Inc.
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { MainPage } from '../page/MainPage.ts';
   3 | import { faker } from '@faker-js/faker'; 
   4 |
   5 | test.describe('Login Validation', () => {
   6 |     let mainPage: MainPage;
   7 |
   8 |     test.beforeEach(async ({ page }) => {
   9 |         mainPage = new MainPage(page); 
   10 |         await mainPage.goto(); 
   11 |     });
   12 |
   13 |     test('Login with valid data / TC 1', async () => {
   14 |         await mainPage.fillLoginDetails('TestLogin_', 'Password1@');
   15 |         await mainPage.clickLoginButton();
   16 |
   17 |         // Перевірка наявності "Logout" кнопки після успішного входу
>  18 |         expect(await mainPage.logoutButton.isVisible()).toBeTruthy();
      |                                                         ^ Error: expect(received).toBeTruthy()
   19 |         await mainPage.clickLogoutButton();
   20 |     });
   21 |
   22 |     test('Login with empty Login field / TC 2', async () => {
   23 |         const validPassword = faker.internet.password({ length: 4, memorable: false, pattern: /[a-zA-Z0-9]/ });
   24 |         await mainPage.fillLoginDetails('', validPassword); 
   25 |         await mainPage.clickLoginButton();
   26 |
   27 |         // Перевірка повідомлення про заповнення поля "Login"
   28 |         const loginMessage = await mainPage.getLoginFieldValidationMessage();
   29 |         expect(loginMessage.toLowerCase()).toContain('fill out this field');
   30 |     });
   31 |
   32 |     test('Login with empty Password field / TC 3', async () => {
   33 |         const validLogin = faker.string.alphanumeric(8); 
   34 |         await mainPage.fillLoginDetails(validLogin, ''); 
   35 |         await mainPage.clickLoginButton();
   36 |
   37 |         // Перевірка повідомлення про заповнення поля "Password"
   38 |         const passwordMessage = await mainPage.getPasswordFieldValidationMessage();
   39 |         expect(passwordMessage.toLowerCase()).toContain('fill out this field');
   40 |     });
   41 |
   42 |     test('Login with empty fields / TC 4', async () => {
   43 |         await mainPage.fillLoginDetails('', ''); 
   44 |         await mainPage.clickLoginButton();
   45 |
   46 |         // Перевірка повідомлення про заповнення поля "Login"
   47 |         const loginMessage = await mainPage.getLoginFieldValidationMessage();
   48 |         expect(loginMessage.toLowerCase()).toContain('fill out this field');
   49 |     });
   50 |
   51 |     test('Login with invalid data / TC 5', async () => {
   52 |         const invalidLogin = faker.string.alphanumeric(8); 
   53 |         const invalidPassword = faker.internet.password({ length: 4, memorable: false, pattern: /[a-zA-Z0-9]/ });
   54 |         await mainPage.fillLoginDetails(invalidLogin, invalidPassword);
   55 |         await mainPage.clickLoginButton();
   56 |
   57 |         // Перевірка повідомлення про помилкові логін/пароль
   58 |         const warningText = await mainPage.getWarningLabelText();
   59 |         expect(warningText?.trim()).toBe('Invalid username/password');
   60 |     });
   61 | });
   62 |
   63 |
   64 |
   65 | // import { test, expect } from '@playwright/test';
   66 | // import { MainPage } from '../page/MainPage.ts';
   67 | // import { faker } from '@faker-js/faker'; 
   68 |
   69 | // test.describe('Login Validation', () => {
   70 | //     let mainPage;
   71 |
   72 | //     test.beforeEach(async ({ page }) => {
   73 | //         mainPage = new MainPage(page); 
   74 | //         await mainPage.goto(); 
   75 | //     });
   76 |
   77 | //     test('Login with valid data / TC 1', async () => {
   78 | //         await mainPage.fillLoginDetails('TestLogin_', 'Password1@');
   79 | //         await mainPage.clickLoginButton();
   80 | //         await mainPage.clickLogoutButton();
   81 | //     });
   82 |
   83 | //     test('Login with empty Login field / TC 2', async () => {
   84 | //         const validPassword = faker.internet.password({ length: 4, memorable: false, pattern: /[a-zA-Z0-9]/ });
   85 |          
   86 | //         await mainPage.fillLoginDetails('', validPassword); 
   87 | //         await mainPage.clickLoginButton();
   88 | //         await mainPage.errorMessageLogin();
   89 | //     });
   90 |
   91 | //     test('Login with empty Password field / TC 3', async () => {
   92 | //         const validLogin = faker.string.alphanumeric(8); 
   93 | //         await mainPage.fillLoginDetails(validLogin, ''); 
   94 | //         await mainPage.clickLoginButton();
   95 | //         await mainPage.errorMessagePassword();
   96 | //     });
   97 |
   98 | //     test('Login with empty fields / TC 4', async () => {
   99 | //         await mainPage.fillLoginDetails('', ''); 
  100 | //         await mainPage.clickLoginButton();
  101 | //         await mainPage.errorMessageLogin();
  102 | //     });
  103 |
  104 | //     test('Login with invalid data / TC 5', async () => {
  105 | //         const invalidLogin = faker.string.alphanumeric(8); 
  106 | //         const invalidPassword = faker.internet.password({ length: 4, memorable: false, pattern: /[a-zA-Z0-9]/ });
  107 |
  108 | //         await mainPage.fillLoginDetails(invalidLogin, invalidPassword);
  109 | //         await mainPage.clickLoginButton();
  110 | //         await mainPage.checkWarningLabel();
  111 | //     });
  112 | // });
  113 |
```