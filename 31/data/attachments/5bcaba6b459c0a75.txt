# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Registration Page Validation >> Registration with valid data / TC 6
- Location: /home/user/Documents/QA_Automation_projects/Playwright/Pl project Buggy Rating/tests/test/registerPage.spec.ts:13:9

# Error details

```
Error: locator.waitFor: Test timeout of 30000ms exceeded.
Call log:
  - waiting for locator('.alert-success') to be visible

    at RegisterPage.getSuccessMessageText (/home/user/Documents/QA_Automation_projects/Playwright/Pl project Buggy Rating/tests/page/RegisterPage.ts:90:23)
    at /home/user/Documents/QA_Automation_projects/Playwright/Pl project Buggy Rating/tests/test/registerPage.spec.ts:29:51
```

# Page snapshot

```yaml
- banner:
  - navigation:
    - link "Buggy Rating"
    - textbox "Login"
    - textbox
    - button "Login"
    - link "Register"
  - heading "Buggy Cars Rating" [level=1]
  - img
- main:
  - main:
    - heading "Register with Buggy Cars Rating" [level=2]
    - text: Login
    - textbox "Login": 38haKVas
    - text: First Name
    - textbox "First Name": Paolo
    - text: Last Name
    - textbox "Last Name": Miller
    - text: Password
    - textbox "Password": wD9vzcVb
    - text: Confirm Password
    - textbox "Confirm Password": wD9vzcVb
    - button "Register"
    - button "Cancel"
    - text: "InvalidPasswordException: Password did not conform with policy: Password must have symbol characters"
  - separator
  - link "Facebook":
    - img
  - link "Twitter":
    - img
  - paragraph: © 2016 Buggy Software, Inc.
```

# Test source

```ts
   1 | import { Page, Locator } from '@playwright/test';
   2 |
   3 | class RegisterPage {
   4 |     private page: Page;
   5 |
   6 |     // Локатори
   7 |     private loginFieldSelector: string = '#username';
   8 |     private firstNameFieldSelector: string = '#firstName';
   9 |     private lastNameFieldSelector: string = '#lastName';
   10 |     private passwordFieldSelector: string = '#password';
   11 |     private confirmPasswordFieldSelector: string = '#confirmPassword';
   12 |     private registerButtonSelector: string = '.btn-default';
   13 |     private errorMessageForPasswordsSelector: string = '(//div[@class="alert alert-danger"])[6]';
   14 |     private successMessageAfterRegistrationSelector: string = '.alert-success';
   15 |
   16 |     constructor(page: Page) {
   17 |         this.page = page;
   18 |     }
   19 |
   20 |     // Геттери
   21 |     get loginField(): Locator {
   22 |         return this.page.locator(this.loginFieldSelector);
   23 |     }
   24 |
   25 |     get firstNameField(): Locator {
   26 |         return this.page.locator(this.firstNameFieldSelector);
   27 |     }
   28 |
   29 |     get lastNameField(): Locator {
   30 |         return this.page.locator(this.lastNameFieldSelector);
   31 |     }
   32 |
   33 |     get passwordField(): Locator {
   34 |         return this.page.locator(this.passwordFieldSelector);
   35 |     }
   36 |
   37 |     get confirmPasswordField(): Locator {
   38 |         return this.page.locator(this.confirmPasswordFieldSelector);
   39 |     }
   40 |
   41 |     get registerButton(): Locator {
   42 |         return this.page.locator(this.registerButtonSelector);
   43 |     }
   44 |
   45 |     get errorMessageForPasswords(): Locator {
   46 |         return this.page.locator(this.errorMessageForPasswordsSelector);
   47 |     }
   48 |
   49 |     // Методи
   50 |     async goto() {
   51 |         await this.page.goto('/register');
   52 |     }
   53 |
   54 |     async fillField(locator: Locator, value: string | undefined) {
   55 |         if (value !== undefined) {
   56 |             await locator.fill(value);
   57 |         }
   58 |     }
   59 |
   60 |     async fillForm({
   61 |         login,
   62 |         firstName,
   63 |         lastName,
   64 |         password,
   65 |         confirmPassword,
   66 |     }: {
   67 |         login?: string;
   68 |         firstName?: string;
   69 |         lastName?: string;
   70 |         password?: string;
   71 |         confirmPassword?: string;
   72 |     }) {
   73 |         await this.fillField(this.loginField, login);
   74 |         await this.fillField(this.firstNameField, firstName);
   75 |         await this.fillField(this.lastNameField, lastName);
   76 |         await this.fillField(this.passwordField, password);
   77 |         await this.fillField(this.confirmPasswordField, confirmPassword);
   78 |     }
   79 |
   80 |     async clickRegisterButton() {
   81 |         await this.registerButton.click();
   82 |     }
   83 |
   84 |     async isRegisterButtonDisabled(): Promise<boolean> {
   85 |         return this.registerButton.isDisabled();
   86 |     }
   87 |
   88 |     async getSuccessMessageText(): Promise<string | null> {
   89 |         const locator = this.page.locator(this.successMessageAfterRegistrationSelector);
>  90 |         await locator.waitFor({ state: 'visible' }); // Очікуємо, поки елемент стане видимим
      |                       ^ Error: locator.waitFor: Test timeout of 30000ms exceeded.
   91 |         return locator.textContent();
   92 |     }
   93 |     
   94 |
   95 |     async getPasswordMismatchError(): Promise<string | null> {
   96 |         return this.errorMessageForPasswords.textContent();
   97 |     }
   98 | }
   99 |
  100 | export { RegisterPage };
  101 |
  102 |
  103 |
  104 |
  105 | // import { Page, Locator, expect } from '@playwright/test';
  106 |
  107 | // class RegisterPage {
  108 | //     private page: Page;
  109 |
  110 | //     // Локатори, які можуть змінюватися
  111 | //     private loginFieldSelector: string = '#username';
  112 | //     private firstNameFieldSelector: string = '#firstName';
  113 | //     private lastNameFieldSelector: string = '#lastName';
  114 | //     private passwordFieldSelector: string = '#password';
  115 | //     private confirmPasswordFieldSelector: string = '#confirmPassword';
  116 | //     private registerButtonSelector: string = '.btn-default';
  117 | //     private cancelButtonSelector: string = 'a.btn:nth-child(7)';
  118 | //     private errorMessageSelector: string = '.result';
  119 | //     private errorMessageForLoginSelector: string = '(//div[@class="alert alert-danger"])[1]';
  120 | //     private errorMessageForFirstNameSelector: string = '(//div[@class="alert alert-danger"])[2]';
  121 | //     private errorMessageForLastNameSelector: string = '(//div[@class="alert alert-danger"])[3]';
  122 | //     private errorMessageForPasswordSelector: string = '(//div[@class="alert alert-danger"])[4]';
  123 | //     private errorMessageForConfirmPasswordSelector: string = '(//div[@class="alert alert-danger"])[5]';
  124 | //     private errorMessageForPasswordsSelector: string = '(//div[@class="alert alert-danger"])[6]';
  125 |
  126 | //     constructor(page: Page) {
  127 | //         this.page = page;
  128 | //     }
  129 |
  130 | //     // Геттери для динамічних локаторів
  131 | //     get loginField(): Locator {
  132 | //         return this.page.locator(this.loginFieldSelector);
  133 | //     }
  134 |
  135 | //     get firstNameField(): Locator {
  136 | //         return this.page.locator(this.firstNameFieldSelector);
  137 | //     }
  138 |
  139 | //     get lastNameField(): Locator {
  140 | //         return this.page.locator(this.lastNameFieldSelector);
  141 | //     }
  142 |
  143 | //     get passwordField(): Locator {
  144 | //         return this.page.locator(this.passwordFieldSelector);
  145 | //     }
  146 |
  147 | //     get confirmPasswordField(): Locator {
  148 | //         return this.page.locator(this.confirmPasswordFieldSelector);
  149 | //     }
  150 |
  151 | //     get registerButton(): Locator {
  152 | //         return this.page.locator(this.registerButtonSelector);
  153 | //     }
  154 |
  155 | //     get cancelButton(): Locator {
  156 | //         return this.page.locator(this.cancelButtonSelector);
  157 | //     }
  158 |
  159 | //     get errorMessage(): Locator {
  160 | //         return this.page.locator(this.errorMessageSelector);
  161 | //     }
  162 |
  163 | //     get errorMessageForLogin(): Locator {
  164 | //         return this.page.locator(this.errorMessageForLoginSelector);
  165 | //     }
  166 |
  167 | //     get errorMessageForFirstName(): Locator {
  168 | //         return this.page.locator(this.errorMessageForFirstNameSelector);
  169 | //     }
  170 |
  171 | //     get errorMessageForLastName(): Locator {
  172 | //         return this.page.locator(this.errorMessageForLastNameSelector);
  173 | //     }
  174 |
  175 | //     get errorMessageForPassword(): Locator {
  176 | //         return this.page.locator(this.errorMessageForPasswordSelector);
  177 | //     }
  178 |
  179 | //     get errorMessageForConfirmPassword(): Locator {
  180 | //         return this.page.locator(this.errorMessageForConfirmPasswordSelector);
  181 | //     }
  182 |
  183 | //     get errorMessageForPasswords(): Locator {
  184 | //         return this.page.locator(this.errorMessageForPasswordsSelector);
  185 | //     }
  186 |
  187 | //     async goto() {
  188 | //         await this.page.goto('/register');
  189 | //     }
  190 |
```