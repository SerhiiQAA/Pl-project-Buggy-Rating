# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Login Validation >> Login with valid data / TC 1
- Location: /home/user/Documents/QA_Automation_projects/Playwright/Pl project Buggy Rating/tests/test/mainLoginPage.spec.ts:18:9

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: locator('xpath=(//a[@class="nav-link"])[2]')
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for locator('xpath=(//a[@class="nav-link"])[2]')

    at /home/user/Documents/QA_Automation_projects/Playwright/Pl project Buggy Rating/tests/test/mainLoginPage.spec.ts:26:57
```

# Page snapshot

```yaml
- banner:
  - navigation:
    - link "Buggy Rating"
    - text: Invalid username/password
    - textbox "Login": vTWlqYqD
    - textbox: cAqHcwy^1!Serg
    - button "Login"
    - link "Register"
  - heading "Buggy Cars Rating" [level=1]
  - img
- main:
  - main:
    - heading "Popular Make" [level=2]
    - link "Lamborghini":
      - img "Lamborghini"
    - heading "Lamborghini (11082 votes)" [level=3]
    - heading "Popular Model" [level=2]
    - link "Diablo":
      - img "Diablo"
    - heading "Lamborghini Diablo (3853 votes)" [level=3]
    - heading "Overall Rating" [level=2]
    - link:
      - img
    - heading "List of all registered models." [level=3]
  - separator
  - link "Facebook":
    - img
  - link "Twitter":
    - img
  - paragraph: © 2016 Buggy Software, Inc.
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { MainPage } from '../page/MainPage.ts';
   3 | import { 
   4 |     generateAndStoreValidLogin, 
   5 |     generateAndStoreValidPassword, 
   6 |     getStoredLogin, 
   7 |     getStoredPassword 
   8 | } from '../../utils/dataGenerators';
   9 |
   10 | test.describe('Login Validation', () => {
   11 |     let mainPage: MainPage;
   12 |
   13 |     test.beforeEach(async ({ page }) => {
   14 |         mainPage = new MainPage(page); 
   15 |         await mainPage.goto(); 
   16 |     });
   17 |
   18 |     test('Login with valid data / TC 1', async () => {
   19 |         // Використовуємо збережені логін і пароль
   20 |         await mainPage.fillLoginDetails(getStoredLogin(), getStoredPassword());
   21 |         await mainPage.clickLoginButton();
   22 |
   23 |         console.log('Login:', getStoredLogin());
   24 |         console.log('Password:', getStoredPassword());
   25 |         
>  26 |         await expect(mainPage.getLogoutButtonLocator()).toBeVisible();
      |                                                         ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
   27 |     });
   28 |
   29 |     test('Login with empty Login field / TC 2', async () => {
   30 |         // Використовуємо функцію для генерації паролю
   31 |         await mainPage.fillLoginDetails('', generateAndStoreValidPassword());
   32 |         await mainPage.clickLoginButton();
   33 |
   34 |         await expect(mainPage.getLoginFieldValidationMessage()).resolves.toMatch(/fill out this field/i);
   35 |     });
   36 |
   37 |     test('Login with empty Password field / TC 3', async () => {
   38 |         // Використовуємо функцію для генерації логіну
   39 |         await mainPage.fillLoginDetails(generateAndStoreValidLogin(), '');
   40 |         await mainPage.clickLoginButton();
   41 |
   42 |         await expect(mainPage.getPasswordFieldValidationMessage()).resolves.toMatch(/fill out this field/i);
   43 |     });
   44 |
   45 |     test('Login with empty fields / TC 4', async () => {
   46 |         // Логін і пароль пусті
   47 |         await mainPage.fillLoginDetails('', '');
   48 |         await mainPage.clickLoginButton();
   49 |
   50 |         await expect(mainPage.getLoginFieldValidationMessage()).resolves.toMatch(/fill out this field/i);
   51 |     });
   52 |
   53 |     test('Login with invalid data / TC 5', async () => {
   54 |         // Генеруємо нові неправильні дані
   55 |         await mainPage.fillLoginDetails(generateAndStoreValidLogin(), generateAndStoreValidPassword());
   56 |         await mainPage.clickLoginButton();
   57 |
   58 |         await expect(mainPage.getWarningLabelText()).resolves.toMatch(/invalid username\/password/i);
   59 |     });
   60 | });
   61 |
   62 |
   63 |
   64 | // import { test, expect } from '@playwright/test';
   65 | // import { MainPage } from '../page/MainPage.ts';
   66 | // import { 
   67 | //     generateValidLogin, 
   68 | //     generateValidPassword 
   69 | // } from '../../utils/dataGenerators';
   70 |
   71 | // test.describe('Login Validation', () => {
   72 | //     let mainPage: MainPage;
   73 |
   74 | //     test.beforeEach(async ({ page }) => {
   75 | //         mainPage = new MainPage(page); 
   76 | //         await mainPage.goto(); 
   77 | //     });
   78 |
   79 | //     test('Login with valid data / TC 1', async () => {
   80 | //         await mainPage.fillLoginDetails('TestLogin_', 'Password1@');
   81 | //         await mainPage.clickLoginButton();
   82 |
   83 | //         await expect(mainPage.getLogoutButtonLocator()).toBeVisible();
   84 | //     });
   85 |
   86 | //     test('Login with empty Login field / TC 2', async () => {
   87 | //         await mainPage.fillLoginDetails('', generateValidPassword());
   88 | //         await mainPage.clickLoginButton();
   89 |
   90 | //         await expect(mainPage.getLoginFieldValidationMessage()).resolves.toMatch(/fill out this field/i);
   91 | //     });
   92 |
   93 | //     test('Login with empty Password field / TC 3', async () => {
   94 | //         await mainPage.fillLoginDetails(generateValidLogin(), '');
   95 | //         await mainPage.clickLoginButton();
   96 |
   97 | //         await expect(mainPage.getPasswordFieldValidationMessage()).resolves.toMatch(/fill out this field/i);
   98 | //     });
   99 |
  100 | //     test('Login with empty fields / TC 4', async () => {
  101 | //         await mainPage.fillLoginDetails('', '');
  102 | //         await mainPage.clickLoginButton();
  103 |
  104 | //         await expect(mainPage.getLoginFieldValidationMessage()).resolves.toMatch(/fill out this field/i);
  105 | //     });
  106 |
  107 | //     test('Login with invalid data / TC 5', async () => {
  108 | //         await mainPage.fillLoginDetails(generateValidLogin(), generateValidPassword());
  109 | //         await mainPage.clickLoginButton();
  110 |
  111 | //         await expect(mainPage.getWarningLabelText()).resolves.toMatch(/invalid username\/password/i);
  112 | //     });
  113 | // });
  114 |
  115 |
  116 |
  117 | // import { test, expect } from '@playwright/test';
  118 | // import { MainPage } from '../page/MainPage.ts';
  119 | // import { faker } from '@faker-js/faker'; 
  120 |
  121 | // test.describe('Login Validation', () => {
  122 | //     let mainPage: MainPage;
  123 |
  124 | //     test.beforeEach(async ({ page }) => {
  125 | //         mainPage = new MainPage(page); 
  126 | //         await mainPage.goto(); 
```